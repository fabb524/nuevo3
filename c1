import openai
import logging  # Para logging interno
import re  # Para detección de palabras clave en la consulta

# Configuración interna para esta clase
class BrainC1:
    def __init__(self):
        """
        Inicializa el cerebro C1. Aquí configuramos el motor de OpenAI y establecemos parámetros predeterminados.
        Esto hace que la clase sea más flexible y fácil de depurar.
        """
        self.engine = "text-davinci-003"  # Motor de OpenAI; puedes cambiarlo si es necesario
        self.max_tokens = 500  # Aumentado para respuestas más largas y detalladas
        self.api_key = None  # Puedes pasar una clave API si se necesita aquí, pero usa config.py para global
        logging.basicConfig(filename='c1_log.txt', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        logging.info("Cerebro C1 inicializado: Experto en primeros auxilios emergentes")
    
    def detect_emergency_type(self, query):
        """
        Sub-método para detectar el tipo de emergencia en la consulta.
        Usa expresiones regulares para identificar palabras clave específicas.
        Esto hace la respuesta más específica y adaptada.
        
        Retorna: Una cadena como 'cpr', 'hemorragia', 'quemadura', o 'general' si no coincide.
        """
        query_lower = query.lower()
        if re.search(r'\b(cpr|reanimacion|cardiopulmonar)\b', query_lower):
            return 'cpr'
        elif re.search(r'\b(hemorragia|sangrado|hemorrhage|bleeding)\b', query_lower):
            return 'hemorragia'
        elif re.search(r'\b(quemadura|burn|quemar)\b', query_lower):
            return 'quemadura'
        elif re.search(r'\b(ahogamiento|drowning)\b', query_lower):
            return 'ahogamiento'
        else:
            return 'general'  # Emergencia general si no se especifica
    
    def generate_prompt(self, query, emergency_type):
        """
        Sub-método para generar un prompt personalizado basado en el tipo de emergencia.
        Esto lo hace más específico: Incluye razonamiento paso a paso, ejemplos reales, refuerzo educativo y advertencias.
        
        El prompt es más largo ahora, con instrucciones detalladas para asegurar respuestas únicas y educativas.
        """
        base_prompt = f"Eres un experto en primeros auxilios emergentes. Razona paso a paso sobre la consulta: '{query}'. "
        
        if emergency_type == 'cpr':
            base_prompt += "1) Identifica si es una parada cardiorrespiratoria. 2) Describe pasos detallados: Coloca las manos en el centro del pecho, comprime 100-120 veces por minuto a 5-6 cm de profundidad, combina con respiraciones de rescate. 3) Proporciona ejemplos: 'Imagina una situación real en un accidente de tráfico'. 4) Refuerza el aprendizaje: '¡Excelente si practicas en un curso certificado! Recuerda: La práctica salva vidas'. 5) Enfatiza: 'No intentes esto sin entrenamiento; llama al 911 inmediatamente y no soy un reemplazo para profesionales médicos'."
        elif emergency_type == 'hemorragia':
            base_prompt += "1) Evalúa la severidad en '{query}'. 2) Pasos: Aplica presión directa con un paño limpio, eleva la zona afectada, usa torniquete si es arterial. 3) Ejemplos: 'Para una cortada profunda, mantén presión por 10 minutos'. 4) Refuerzo: '¡Buen trabajo al aprender esto; podría salvar a alguien!'. 5) Advierte: 'Busca atención médica urgente; soy solo para educación'."
        elif emergency_type == 'quemadura':
            base_prompt += "1) Clasifica el tipo de quemadura en '{query}' (e.g., primera, segunda grado). 2) Pasos: Enfría con agua fría por 10-20 minutos, cubre con un vendaje limpio, no uses hielo. 3) Ejemplos: 'Para una quemadura en la mano, evita romper ampollas'. 4) Refuerzo: '¡Recuerda repasar esto regularmente!'. 5) Advierte: 'Para quemaduras graves, ve a emergencias; no confíes solo en mí'."
        elif emergency_type == 'ahogamiento':
            base_prompt += "1) Analiza la situación en '{query}'. 2) Pasos: Saca a la persona del agua, verifica respuesta, aplica CPR si necesario, mantén caliente. 3) Ejemplos: 'En una piscina, asegúrate de no poner en riesgo tu seguridad'. 4) Refuerzo: '¡Estás avanzando en tus conocimientos; practícalo en simulacros!'. 5) Advierte: 'Llama a servicios de emergencia siempre; soy educativo, no un sustituto'."
        else:  # General
            base_prompt += "1) Identifica el problema general en '{query}'. 2) Proporciona pasos universales: Evalúa la escena, llama por ayuda, aplica primeros auxilios básicos. 3) Ejemplos: 'Para cualquier emergencia, prioriza la seguridad'. 4) Refuerzo: '¡Genial que estés aprendiendo!'. 5) Advierte: 'Consulta profesionales; no use esta info en situaciones reales sin preparación'."
        
        base_prompt += " Sé único: Usa un tono amigable, educativo y diferente a otras IAs, enfocándote en refuerzo positivo y razonamiento lógico."
        return base_prompt  # Retorna el prompt generado
    
    def process_query(self, query):
        """
        Método principal para procesar la consulta. Es más largo ahora porque:
        - Detecta el tipo de emergencia.
        - Genera un prompt personalizado.
        - Llama a OpenAI y maneja errores.
        - Registra logs para depuración.
        
        Esto asegura que las respuestas sean específicas, detalladas y educativas.
        """
        try:
            emergency_type = self.detect_emergency_type(query)  # Detectar tipo
            logging.info(f"Tipo de emergencia detectado: {emergency_type} para consulta: {query}")
            
            prompt = self.generate_prompt(query, emergency_type)  # Generar prompt
            logging.info("Prompt generado para OpenAI")
            
            response = openai.Completion.create(
                engine=self.engine,
                prompt=prompt,
                max_tokens=self.max_tokens,  # 500 tokens para respuestas más largas
                temperature=0.7  # Ajuste para variabilidad en respuestas
            )
            
            full_response = response.choices[0].text.strip()
            logging.info("Respuesta generada exitosamente")
            return full_response  # Retorna la respuesta
        except Exception as e:
            logging.error(f"Error en process_query de C1: {e}")
            return "Lo siento, hubo un error al procesar tu consulta. Intenta de nuevo o contacta a un profesional."  # Respuesta de fallback
    
    def example_usage(self):
        """
        Sub-método adicional para pruebas: Proporciona un ejemplo de cómo usar esta clase.
        Esto lo hace más educativo y fácil de entender.
        """
        example_query = "¿Qué hacer en una emergencia de CPR?"
        print(f"Ejemplo: Procesando consulta '{example_query}'")
        result = self.process_query(example_query)
        print(f"Respuesta de ejemplo: {result}")
        # No ejecutar esto automáticamente; es para depuración manual

# Ejemplo de inicialización y uso (para pruebas locales, coméntalo si no es necesario)
if __name__ == "__main__":
    c1 = BrainC1()
    c1.example_usage()  # Ejecuta un ejemplo para probar