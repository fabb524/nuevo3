# Importar las librerías necesarias
import langdetect  # Para detectar el idioma
from deep_translator import GoogleTranslator  # Para traducción (usa Google Translate API)
import logging  # Para registrar errores y depuración

class Brain6:
    """
    Clase para el Cerebro 6 (c6): Especialista en idiomas con enfoque en términos médicos.
    - Detecta el idioma de un texto.
    - Traduce textos, priorizando términos médicos para mantener precisión y naturalidad.
    - Integra con el supervisor y orquestador: Recibe texto, lo procesa y devuelve resultados.
    - Enfoque educativo: Añade breves notas educativas para términos médicos sin alterar el flujo.
    - No reemplaza a profesionales; solo enseña y refuerza.
    """

    def __init__(self):
        self.base_language = 'en'  # Idioma base: Inglés, para integración con otros cerebros
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    def detect_language(self, text):
        """
        Detecta el idioma del texto proporcionado.
        Args:
            text (str): El texto a analizar.
        Returns:
            str: Código del idioma detectado (e.g., 'es' para español, 'en' para inglés).
        """
        try:
            return langdetect.detect(text)
        except langdetect.lang_detect_exception.LangDetectException as e:
            logging.error(f"Error detectando idioma: {e}. Asumiendo idioma base 'en'.")
            return self.base_language  # Por defecto, inglés

    def translate(self, text, from_lang=None, to_lang=None):
        """
        Traduce el texto de un idioma a otro, con enfoque en términos médicos.
        - Si from_lang no se especifica, lo detecta automáticamente.
        - Si to_lang no se especifica, usa el idioma base (inglés).
        - Para términos médicos, añade una breve nota educativa para reforzar el aprendizaje,
          manteniendo la naturalidad.
        Args:
            text (str): El texto a traducir.
            from_lang (str, optional): Idioma de origen (e.g., 'es'). Si None, se detecta.
            to_lang (str, optional): Idioma de destino (e.g., 'en'). Si None, usa el base.
        Returns:
            tuple: (texto_traducido, idioma_original) para que el orquestador lo use.
        """
        if from_lang is None:
            from_lang = self.detect_language(text)
        
        if to_lang is None:
            to_lang = self.base_language  # Traducir a inglés por defecto
        
        try:
            translator = GoogleTranslator(source=from_lang, target=to_lang)
            translated_text = translator.translate(text)
            
            # Enfoque educativo: Detectar y enriquecer términos médicos comunes en contextos de primeros auxilios
            medical_terms = {
                'heart attack': 'ataque al corazón',  
                'CPR': 'RCP (Reanimación Cardiopulmonar)',
                'fracture': 'fractura',
                # Añade más términos médicos relevantes para primeros auxilios según sea necesario
            }
            
            for term_en, term_other in medical_terms.items():
                if term_en.lower() in translated_text.lower() and to_lang == self.base_language:
                    # Añadir nota educativa en el idioma de destino
                    translated_text = translated_text.replace(term_en, f"{term_en} (un término médico clave; en emergencias, busca ayuda profesional)")
                elif term_other.lower() in text.lower() and to_lang != from_lang:
                    # Añadir nota si se traduce de vuelta
                    translated_text += f" Nota: '{term_other}' significa '{term_en}' en inglés, relacionado con primeros auxilios. Recuerda, esto es educativo, no sustituye a un experto."
            
            logging.info(f"Texto traducido de {from_lang} a {to_lang}: {translated_text}")
            return translated_text, from_lang  # Devolver el texto traducido y el idioma original
        
        except Exception as e:
            logging.error(f"Error en la traducción: {e}. Devolviendo texto original.")
            return text, from_lang  # En caso de error, devolver el original

    def process_input(self, input_text):
        """
        Método principal para procesar la entrada: Detecta el idioma y traduce al idioma base si es necesario.
        Args:
            input_text (str): El texto de entrada del usuario.
        Returns:
            tuple: (texto_procesado, idioma_original) - El texto traducido al idioma base, o el original si ya está en él.
        """
        original_lang = self.detect_language(input_text)
        
        if original_lang != self.base_language:
            # Traducir al idioma base
            processed_text, _ = self.translate(input_text, from_lang=original_lang, to_lang=self.base_language)
            return processed_text, original_lang  # Devolver texto traducido y idioma original
        else:
            return input_text, original_lang  # Ya está en el idioma base, devolver tal cual
