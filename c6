# Importar las librerías necesarias
import langdetect  # Para detectar el idioma
from deep_translator import GoogleTranslator  # Para traducción (usa Google Translate API)
import logging  # Para registrar errores y depuración

class Brain6:
    """
    Clase para el Cerebro 6 (c6): Especialista en idiomas con enfoque en términos médicos.
    - Detecta el idioma de un texto.
    - Traduce textos, priorizando términos médicos para mantener precisión y naturalidad.
    - Integra con el supervisor y orquestador: Recibe texto, lo procesa y devuelve resultados.
    - Enfoque educativo: Añade breves notas educativas para términos médicos sin alterar el flujo.
    - No reemplaza a profesionales; solo enseña y refuerza.
    """

    def __init__(self):
        self.base_language = 'en'  # Idioma base: Inglés, para integración con otros cerebros
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    def detect_language(self, text):
        """
        Detecta el idioma del texto proporcionado.
        Args:
            text (str): El texto a analizar.
        Returns:
            str: Código del idioma detectado (e.g., 'es' para español, 'en' para inglés).
        """
        try:
            return langdetect.detect(text)
        except langdetect.lang_detect_exception.LangDetectException as e:
            logging.error(f"Error detectando idioma: {e}. Asumiendo idioma base 'en'.")
            return self.base_language  # Por defecto, inglés

    def translate(self, text, from_lang, to_lang):
        """
        Traduce el texto de un idioma a otro, con enfoque en términos médicos.
        Args:
            text (str): El texto a traducir.
            from_lang (str): Idioma de origen.
            to_lang (str): Idioma de destino.
        Returns:
            str: Texto traducido.
        """
        try:
            translator = GoogleTranslator(source=from_lang, target=to_lang)
            translated_text = translator.translate(text)
            
            # Enfoque educativo: Detectar y enriquecer términos médicos comunes en contextos de primeros auxilios
            medical_terms = {
                'heart attack': 'ataque al corazón',  
                'CPR': 'RCP (Reanimación Cardiopulmonar)',
                'fracture': 'fractura',
                # Añade más términos médicos relevantes para primeros auxilios según sea necesario
            }
            
            for term_en, term_other in medical_terms.items():
                # Si se traduce al inglés y encuentra el término en inglés, añade nota educativa
                if to_lang == 'en' and term_en.lower() in translated_text.lower():
                    translated_text = translated_text.replace(term_en, f"{term_en} (medical term; seek professional help in emergencies)")
                # Si se traduce del inglés a otro idioma y el término fuente está en el texto original, añade nota educativa
                elif to_lang != 'en' and term_other.lower() in translated_text.lower():
                    translated_text = translated_text.replace(term_other, f"{term_other} (término médico; en emergencias, busca ayuda profesional)")

            logging.info(f"Texto traducido de {from_lang} a {to_lang}: {translated_text}")
            return translated_text
        
        except Exception as e:
            logging.error(f"Error en la traducción: {e}. Devolviendo texto original.")
            return text  # En caso de error, devolver el original

    def process_input(self, input_text):
        """
        Procesa la entrada del usuario:
        - Detecta el idioma del usuario.
        - Si es diferente al idioma base, traduce al idioma base.
        - Si ya está en el idioma base, lo deja igual.
        - Si el usuario necesita respuesta en su idioma, traduce de vuelta solo si es necesario.
        Args:
            input_text (str): El texto de entrada del usuario.
        Returns:
            dict: {'original_text': ..., 'original_lang': ..., 'base_text': ..., 'base_lang': ..., 'final_text': ..., 'final_lang': ...}
        """
        detected_lang = self.detect_language(input_text)
        base_lang = self.base_language

        # Paso 1: Traducir al idioma base si es necesario
        if detected_lang != base_lang:
            base_text = self.translate(input_text, from_lang=detected_lang, to_lang=base_lang)
        else:
            base_text = input_text

        # Paso 2: Si el idioma base es distinto al del usuario y se requiere respuesta en el idioma original, traducir de vuelta
        # (Esto depende de la integración, aquí dejamos la opción para hacerlo)
        # Por defecto, asumimos que la salida final debe estar en el idioma original si no es igual al idioma base
        if detected_lang != base_lang:
            final_text = self.translate(base_text, from_lang=base_lang, to_lang=detected_lang)
            final_lang = detected_lang
        else:
            final_text = base_text
            final_lang = base_lang

        return {
            'original_text': input_text,
            'original_lang': detected_lang,
            'base_text': base_text,
            'base_lang': base_lang,
            'final_text': final_text,
            'final_lang': final_lang
        }
